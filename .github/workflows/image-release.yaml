name: release-image-build

on:
  workflow_dispatch:

env:
  REGISTRY: quay.io
  QUAY_ORG: kuberay

jobs:
# ────────────────────────────────────────────────────────────
  release_apiserver_image:
    name: Release APIServer Docker Image
    runs-on: ubuntu-22.04
    env:
      working-directory: ./apiserver
    steps:
    # --- gate: only run on tag ------------------------------
    - uses: actions/github-script@v7
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with: { script: core.setFailed('This action can only be run on tags') }

    # --- tooling --------------------------------------------
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - uses: actions/setup-go@v5
      with: { go-version: "1.22" }

    - name: Extract tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Get revision SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # --- build + unit‑test ----------------------------------
    - name: Get dependencies
      run: go mod download
      working-directory: ${{ env.working-directory }}

    - name: Build
      run: go build ./...
      working-directory: ${{ env.working-directory }}

    - name: Test
      run: go test ./pkg/... ./cmd/... -race -parallel 4
      working-directory: ${{ env.working-directory }}

    # --- multi‑arch image -----------------------------------
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with: { install: true }

    - name: Login to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_TOKEN }}

    - name: Build & Push APIServer (multi‑arch)
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.working-directory }}
        file: ${{ env.working-directory }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        provenance: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/apiserver:${{ steps.vars.outputs.sha_short }}
          ${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/apiserver:${{ env.tag }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/apiserver:buildcache
        cache-to:   type=registry,ref=${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/apiserver:buildcache,mode=max

# ────────────────────────────────────────────────────────────
  release_operator_image:
    name: Release Operator Docker Image
    runs-on: ubuntu-22.04
    env:
      working-directory: ./ray-operator
    steps:
    # --- gate: only run on tag ------------------------------
    - uses: actions/github-script@v7
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with: { script: core.setFailed('This action can only be run on tags') }

    # --- tooling --------------------------------------------
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - uses: actions/setup-go@v5
      with: { go-version: "1.22" }

    - name: Extract tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Get revision SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # --- build + unit‑test ----------------------------------
    - name: Get dependencies
      run: go mod download
      working-directory: ${{ env.working-directory }}

    - name: Build
      run: make build
      working-directory: ${{ env.working-directory }}

    - name: Test
      run: make test
      working-directory: ${{ env.working-directory }}

    # --- cross‑compile binaries (optional, keep original) ---
    - name: Build linux/amd64 Operator binary
      env: { CGO_ENABLED: 1, GOOS: linux, GOARCH: amd64 }
      run: CGO_ENABLED=$CGO_ENABLED GOOS=$GOOS GOARCH=$GOARCH go build -tags strictfipsruntime -a -o manager-$GOARCH main.go
      working-directory: ${{ env.working-directory }}

    - name: Build linux/arm64 Operator binary
      env: { CC: aarch64-linux-gnu-gcc, CGO_ENABLED: 1, GOOS: linux, GOARCH: arm64 }
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        CC=$CC CGO_ENABLED=$CGO_ENABLED GOOS=$GOOS GOARCH=$GOARCH go build -tags strictfipsruntime -a -o manager-$GOARCH main.go
      working-directory: ${{ env.working-directory }}

    # --- multi‑arch image -----------------------------------
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with: { install: true }

    - name: Login to Quay.io
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_TOKEN }}

    - name: Build & Push Operator (multi‑arch)
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.working-directory }}
        file: ${{ env.working-directory }}/Dockerfile.buildx
        platforms: linux/amd64,linux/arm64
        push: true
        provenance: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/operator:${{ steps.vars.outputs.sha_short }}
          ${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/operator:${{ env.tag }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/operator:buildcache
        cache-to:   type=registry,ref=${{ env.REGISTRY }}/${{ env.QUAY_ORG }}/operator:buildcache,mode=max
